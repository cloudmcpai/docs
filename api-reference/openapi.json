{
  "openapi": "3.1.0",
  "info": {
    "title": "MCPfy API",
    "description": "MCPfy API for generating MCP tokens and managing plant store operations",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.mcpfy.ai/dev/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/mcp-servers": {
      "get": {
        "summary": "List MCP Servers",
        "description": "Retrieve a list of all MCP servers for the authenticated user",
        "operationId": "listMCPServers",
        "tags": ["MCP Servers"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved MCP servers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MCPServer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          }
        }
      }
    },
    "/generate-mcp-token": {
      "post": {
        "summary": "Generate MCP URL",
        "description": "Generate a new MCP URL for a specific server and customer",
        "requestBody": {
          "description": "MCP server ID and customer details for URL generation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MCPTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MCP URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MCPTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Invalid server ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MCPTokenRequest": {
        "required": [
          "mcpServerId",
          "customerDetails"
        ],
        "type": "object",
        "properties": {
          "mcpServerId": {
            "description": "The unique identifier for the MCP server",
            "type": "string",
            "example": "63re68ca47d201fa9d2974fa"
          },
          "customerDetails": {
            "$ref": "#/components/schemas/CustomerDetails"
          }
        }
      },
      "CustomerDetails": {
        "required": [
          "primaryIdentity"
        ],
        "type": "object",
        "properties": {
          "primaryIdentity": {
            "description": "Primary identifier for the customer (typically email)",
            "type": "string",
            "example": "user@example.com"
          },
          "metadata": {
            "$ref": "#/components/schemas/CustomerMetadata"
          }
        }
      },
      "CustomerMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Customer's full name",
            "type": "string",
            "example": "John Doe"
          },
          "company": {
            "description": "Customer's company name",
            "type": "string",
            "example": "Acme Corp"
          },
          "department": {
            "description": "Customer's department",
            "type": "string",
            "example": "Engineering"
          }
        }
      },
      "MCPTokenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Indicates whether the request was successful",
            "type": "string",
            "example": "success",
            "enum": ["success", "error"]
          },
          "data": {
            "$ref": "#/components/schemas/MCPTokenData"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetails"
          }
        }
      },
      "MCPTokenData": {
        "type": "object",
        "properties": {
          "url": {
            "description": "The MCP stream URL for connecting to the server",
            "type": "string",
            "example": "https://mcp.mcpfy.ai/5ftIjklywsiC9u6rMG45Xgtxzq1SAsFv/stream"
          },
          "token": {
            "description": "The generated MCP token for authentication",
            "type": "string",
            "example": "5ftIjklywsiC9u6rMG45Xgtxzq1SAsFv"
          },
          "customerId": {
            "description": "The unique identifier for the customer associated with this token",
            "type": "string",
            "example": "68d1a6ccdde500225e8cd70c"
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code identifying the type of error",
            "type": "string",
            "example": "invalid_server_id"
          },
          "message": {
            "description": "Human-readable error message describing the issue",
            "type": "string",
            "example": "The provided MCP server ID is invalid or not found"
          },
          "retryAfter": {
            "description": "Seconds to wait before retrying (only for rate limit errors)",
            "type": "integer",
            "example": 45
          }
        }
      },
      "MCPServer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the MCP server",
            "example": "64f8a1b2c3d4e5f6a7b8c9d0"
          },
          "name": {
            "type": "string",
            "description": "Name of the MCP server",
            "example": "My MCP Server"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the MCP server is currently active",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the server was created",
            "example": "2023-09-06T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the server was last updated",
            "example": "2023-09-06T10:30:00.000Z"
          }
        },
        "required": ["id", "name", "isActive", "createdAt", "updatedAt"]
      },
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}